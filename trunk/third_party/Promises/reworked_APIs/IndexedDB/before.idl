/**************************************
 * Extracted via the web inspector from:
 *
 *    http://www.w3.org/TR/IndexedDB/
 *
 * By running:
 *
 *    Array.prototype.slice.call(
 *      document.querySelectorAll(".idl,.es-code")
 *    ).map(function(n) { return n.innerText; }).join("\n\n\n");
 *
 **/

/**************************************
 * 3.1.9
 **/
interface IDBKeyRange {
    readonly attribute any     lower;
    readonly attribute any     upper;
    readonly attribute boolean lowerOpen;
    readonly attribute boolean upperOpen;
    static IDBKeyRange only (any value);
    static IDBKeyRange lowerBound (any lower, optional boolean open);
    static IDBKeyRange upperBound (any upper, optional boolean open);
    static IDBKeyRange bound (any lower, any upper, optional boolean lowerOpen, optional boolean upperOpen);
};


/**************************************
 * 3.1.12
 **/
dictionary IDBObjectStoreParameters {
  DOMString? keyPath = null;
  boolean autoIncrement = false;
};

dictionary IDBIndexParameters {
  boolean unique = false;
  boolean multiEntry = false;
};

dictionary IDBVersionChangeEventInit : EventInit {
  unsigned long long oldVersion = 0;
  unsigned long long? newVersion = null;
};


/**************************************
 * 3.2.1
 **/
interface IDBRequest : EventTarget {
    readonly attribute any            result;
    readonly attribute DOMError       error;
    readonly attribute Object         source;
    readonly attribute IDBTransaction transaction;
    readonly attribute DOMString      readyState;
    [TreatNonCallableAsNull]
             attribute Function?      onsuccess;
    [TreatNonCallableAsNull]
             attribute Function?      onerror;
};

interface IDBOpenDBRequest : IDBRequest {
    [TreatNonCallableAsNull]
    attribute Function? onblocked;
    [TreatNonCallableAsNull]
    attribute Function? onupgradeneeded;
};


/**************************************
 * 3.2.2
 **/
[Constructor(DOMString type, optional IDBVersionChangeEventInit eventInitDict)]
interface IDBVersionChangeEvent : Event {
    readonly attribute unsigned long long  oldVersion;
    readonly attribute unsigned long long? newVersion;
};


/**************************************
 * 3.2.3
 **/
Window implements IDBEnvironment;

WorkerUtils implements IDBEnvironment;

[NoInterfaceObject]
interface IDBEnvironment {
    readonly attribute IDBFactory indexedDB;
};

interface IDBFactory {
    IDBOpenDBRequest open (DOMString name, [EnforceRange] optional unsigned long long version);
    IDBOpenDBRequest deleteDatabase (DOMString name);
    short            cmp (any first, any second);
};


/**************************************
 * 3.2.4
 **/
interface IDBDatabase : EventTarget {
    readonly attribute DOMString          name;
    readonly attribute unsigned long long version;
    readonly attribute DOMStringList      objectStoreNames;
    IDBObjectStore createObjectStore (DOMString name, optional IDBObjectStoreParameters optionalParameters);
    void           deleteObjectStore (DOMString name);
    IDBTransaction transaction (any storeNames, optional DOMString mode);
    void           close ();
    [TreatNonCallableAsNull]
             attribute Function?          onabort;
    [TreatNonCallableAsNull]
             attribute Function?          onerror;
    [TreatNonCallableAsNull]
             attribute Function?          onversionchange;
};


/**************************************
 * 3.2.5
 **/
interface IDBObjectStore {
    readonly attribute DOMString      name;
    readonly attribute DOMString      keyPath;
    readonly attribute DOMStringList  indexNames;
    readonly attribute IDBTransaction transaction;
    readonly attribute boolean        autoIncremenent;;
    IDBRequest put (any value, optional any key);
    IDBRequest add (any value, optional any key);
    IDBRequest delete (any key);
    IDBRequest get (any key);
    IDBRequest clear ();
    IDBRequest openCursor (optional any? range, optional DOMString direction);
    IDBIndex   createIndex (DOMString name, any keyPath, optional IDBIndexParameters optionalParameters);
    IDBIndex   index (DOMString name);
    void       deleteIndex (DOMString indexName);
    IDBRequest count (optional any key);
};


/**************************************
 * 3.2.6
 **/
interface IDBIndex {
    readonly attribute DOMString      name;
    readonly attribute IDBObjectStore objectStore;
    readonly attribute DOMString      keyPath;
    readonly attribute boolean        multiEntry;
    readonly attribute boolean        unique;
    IDBRequest openCursor (optional any? range, optional DOMString direction);
    IDBRequest openKeyCursor (optional any? range, optional DOMString direction);
    IDBRequest get (any key);
    IDBRequest getKey (any key);
    IDBRequest count (optional any key);
};


/**************************************
 * 3.2.7
 **/
interface IDBCursor {
    readonly attribute Object    source;
    readonly attribute DOMString direction;
    readonly attribute any       key;
    readonly attribute any       primaryKey;
    IDBRequest update (any value);
    void       advance ([EnforceRange] unsigned long count);
    void       continue (optional any key);
    IDBRequest delete ();
};

interface IDBCursorWithValue : IDBCursor {
    readonly attribute any value;
};


/**************************************
 * 3.2.8
 **/
interface IDBTransaction : EventTarget {
    readonly attribute DOMString   mode;
    readonly attribute IDBDatabase db;
    readonly attribute DOMError    error;
    IDBObjectStore objectStore (DOMString name);
    void           abort ();
    [TreatNonCallableAsNull]
             attribute Function?   onabort;
    [TreatNonCallableAsNull]
             attribute Function?   oncomplete;
    [TreatNonCallableAsNull]
             attribute Function?   onerror;
};


/**************************************
 * 3.3.1
 **/
WorkerUtils implements IDBEnvironmentSync;

[NoInterfaceObject]
interface IDBEnvironmentSync {
    readonly attribute IDBFactorySync indexedDBSync;
};

interface IDBFactorySync {
    IDBDatabaseSync open (DOMString name, [EnforceRange] optional unsigned long long version, optional IDBVersionChangeCallback upgradeCallback, optional unsigned long timeout);
    void            deleteDatabase (DOMString name);
    short           cmp (any first, any second);
};


/**************************************
 * 3.3.2
 **/
interface IDBDatabaseSync {
    readonly attribute DOMString          name;
    readonly attribute unsigned long long version;
    readonly attribute DOMStringList      objectStoreNames;
    IDBObjectStoreSync createObjectStore (DOMString name, optional IDBObjectStoreParameters optionalParameters);
    void               deleteObjectStore (DOMString name);
    void               transaction (any storeNames, IDBTransactionCallback callback, optional DOMString mode, optional unsigned long timeout);
    void               close ();
};

[NoInterfaceObject, Callback]
interface IDBTransactionCallback {
    void transactionStarted (IDBTransactionSync transaction);
};

[NoInterfaceObject, Callback]
interface IDBVersionChangeCallback {
    void transactionStarted (IDBTransactionSync transaction, unsigned long long oldVersion);
};



/**************************************
 * 3.3.3
 **/
interface IDBObjectStoreSync {
    readonly attribute DOMString          name;
    readonly attribute any                keyPath;
    readonly attribute DOMStringList      indexNames;
    readonly attribute IDBTransactionSync transaction;
    readonly attribute boolean            autoIncremenent;;
    any                    put (any value, optional any key);
    any                    add (any value, optional any key);
    boolean                delete (any key);
    any                    get (any key);
    void                   clear ();
    IDBIndexSync           createIndex (DOMString name, any keyPath, optional IDBIndexParameters optionalParameters);
    IDBIndexSync           index (DOMString name);
    void                   deleteIndex (DOMString indexName);
    IDBCursorWithValueSync openCursor (optional any? range, optional DOMString direction);
    unsigned long          count (optional any key);
};


/**************************************
 * 3.3.4
 **/
interface IDBIndexSync {
    readonly attribute DOMString          name;
    readonly attribute IDBObjectStoreSync objectStore;
    readonly attribute any                keyPath;
    readonly attribute boolean            multiEntry;
    readonly attribute boolean            unique;
    IDBCursorWithValueSync openCursor (optional any? range, optional DOMString direction);
    IDBCursorSync          openKeyCursor (optional any? range, optional DOMString direction);
    any                    get (any key);
    any                    getKey (any key);
    unsigned long          count (optional any key);
};


/**************************************
 * 3.3.5
 **/
interface IDBCursorSync {
    readonly attribute Object    source;
    readonly attribute DOMString direction;
    readonly attribute any       primaryKey;
    IDBRequest update (any value);
    boolean    advance ([EnforceRange] unsigned long count);
    boolean    continue (optional any key);
    boolean    delete ();
};

interface IDBCursorWithValueSync : IDBCursorSync {
    attribute any value;
};


/**************************************
 * 3.3.6
 **/
interface IDBTransactionSync {
    readonly attribute DOMString       mode;
             attribute IDBDatabaseSync db;
    readonly attribute DOMError        error;
    IDBObjectStoreSync objectStore (DOMString name);
    void               abort ();
};