#summary Contributing to trace-viewer

=Getting the Code=
1. [http://dev.chromium.org/developers/how-tos/install-depot-tools Install the depot tools]

2. Make sure you have git svn installed. `apt-get install git-svn` if not.  The local copy of the source will be a git repository, all the normal git commands work locally.  The special git svn commands are only needed when connecting to the legacy remote server.

3. Get the source:
{{{
git clone https://chromium.googlesource.com/external/trace-viewer.git
}}}
If you have a Chromium checkout, just cd to third_party/trace-viewer

4. Optionally, set your repo up for committing:
{{{
git svn init http://trace-viewer.googlecode.com/svn -Ttrunk
git config svn-remote.svn.fetch trunk:refs/remotes/origin/master
git config svn-remote.svn.pushurl https://trace-viewer.googlecode.com/svn

git svn fetch
}}}

=Writing a patch=
1. Make a branch. Folks used to Android-style repo/gerrit should note that this project's review system (git cl + rietveld) uses 1 codereview per branch. Your branch's commits are squashed on upload.
{{{
git checkout -t -b mybranch origin/master
}}}

2. Set up the dev server. From the main trace-viewer directory:
{{{
./run_dev_server.py
}}}

You can now run a "fake instance" of tracing by going to http://localhost:8003/examples/trace_viewer.html ... this will show any file in ./test_data/.

Trace viewer is heavily unit tests. You can run any of the tests by browsing to http://localhost:8003/.


3a. Iteratively:
{{{
... make changes
... verify changes by running http://localhost:8003/src/tests.html
git commit -a -m "My change"
git cl upload
}}}
The change-list will be uploaded to https://codereview.appspot.com.

3b. To update your local repository, first ensure that you have no uncommitted changes then `git checkout master`.  Then update using
{{{
git svn rebase
}}}
For each local branch, rebase them to the new master branch, eg `git rebase master local-branch-name`.

4. When you've gotten LGTM
{{{
git cl dcommit
}}}

If you are prompted for a username/password, use your *googlecode password* from [https://code.google.com/hosting/settings here].

*Note!!!* This is *NOT the same password* as you use for regular chromium commits. The chromium ecosystem has different passwords for different occasions just to keep you on your toes. For trace-viewer, you need your googlecode password. Most chromium commits use the chromium-access password. Confusing, yes!

= Working with examples page =
The  `examples/trace_viewer.html` is a standalone Web page simulating
the `about:tracing` page with canned tracing data.
If you run the `run_dev_server.py` script in the root directory
then navigate to `localhost:8003/examples/trace_viewer.html` you should be
able to see an example trace. 

If you want to see other data, edit `trace_viewer.html` and change the line which sets filenames near the bottom. Change the
`../test_data/simple_trace.json` to the path to another json file and reload the
page. There are a few different files in `test_data/` that can be used for
this purpose. It isn't possible to run a new trace from the
example file as `chrome://tracing` has to be built directly into chrome to
have the needed access.

=Updating Chromium's about:tracing==
To get your change to appear in Chrome's about:tracing, commit to trace-viewer. Make a note of the svn revision you landed. Then edit Chrome's [http://src.chromium.org/chrome/trunk/src/DEPS src/DEPS] file. Look in there for a line like
{{{
  "src/third_party/trace-viewer":
    (Var("googlecode_url") % "trace-viewer") + "/trunk@319",
}}}
Update the number to the rev you want to roll to, and [http://www.chromium.org/developers/contributing-code contribute a codereview to chrome] for the edit.

=Some notes=

  * Testing full files against importer changes: put a file into test_data/, then edit and run src/interactive_tests.html. 