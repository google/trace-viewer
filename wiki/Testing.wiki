#summary Overview of testing in trace-viewer.
#labels Phase-QA,Phase-Implementation,Testing

= Introduction =

Trace viewer has a simple, synchronous, testing framework. The bulk of the framework exists in `base/unittest.js` with the assertions in `base/unittest/assertions.js`.

Test files exist in `<filename>_test.js` files where, typically, filename will match the name of the file being tested. The tests sit in the same folder as their respective files.


= Test Creation =

The general structure of tests is (assuming a file of ui/foo_test.js):

{{{
base.require('ui.foo');

'use strict';

base.unittest.testSuite('ui.foo', function() {
  setup(function() {
    // stuff to do before every test.
  });

  test('instantiate', function() {
    var myFoo = ui.Foo();
    this.addHTMLOutput(myFoo);
  });

  test('somethingElse', function() {
  });
});
}}}

Generally, there is one test suite per file (there is an assumption inside the code that this is true). If you add something to the DOM with `appendChild` you should remove it. The exception is if you use `this.addHTMLOutput(element)`. If you use that, then you should be good, the content will get shown if there is an error, otherwise it's hidden.

The current tests follow the convention that if the test is there just to draw things, to name them with a prefix of instantiate. So, `instantiate`, `instantiate_multiRow`, etc.

= Execution =

=== Running all tests ===

{{{
localhost:8003/test.html
}}}

=== Running an individual test suite (such as `ui/foo_test.js`) ===

{{{
localhost:8003/test.html?suite=ui/foo
}}}

=== Running just a single test within a suite ===

{{{
localhost:8003/test.html?suite=ui/foo&test=blah
}}}

= Options =

If you select the `small format` option on the main test page and reload then the test output will be condensed to a lot smaller, making it easier to see errors without having to scroll the screen.